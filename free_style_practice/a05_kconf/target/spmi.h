#ifndef __TARGET_SPMI_H_INCLUDE__
#define __TARGET_SPMI_H_INCLUDE__

typedef enum
{
    SPMI_SUCCESS,

    // Transaction Errors
    SPMI_FAILURE_BUS_BUSY,
    SPMI_FAILURE_BUS_DISABLED,
    SPMI_FAILURE_COMMAND_NOT_SUPPORTED,
    SPMI_FAILURE_COMMAND_NOT_ALLOWED,
    SPMI_FAILURE_TRANSACTION_FAILED,
    SPMI_FAILURE_TRANSACTION_DENIED,
    SPMI_FAILURE_TRANSACTION_DROPPED,
    SPMI_FAILURE_TRANSACTION_TIMEOUT,
    SPMI_FAILURE_SERIAL_CLK_IS_OFF,
    SPMI_FAILURE_AHB_CLK_IS_OFF,

    // Initialization & Validation Errors
    SPMI_FAILURE_FUNCTIONALITY_NOT_SUPPORTED,
    SPMI_FAILURE_INVALID_PARAMETER,
    SPMI_FAILURE_INIT_FAILED,
    SPMI_FAILURE_NOT_INITIALIZED,
    SPMI_FAILURE_INVALID_BUFFER,
    SPMI_FAILURE_TOO_MANY_ENTRIES,
    SPMI_FAILURE_NOT_ENOUGH_RGS,
    SPMI_FAILURE_INVALID_BUS_ID,
    SPMI_FAILURE_INVALID_MASTER_ID,
    SPMI_FAILURE_INVALID_SLAVE_ID,
    SPMI_FAILURE_INVALID_ADDRESS,
    SPMI_FAILURE_INVALID_PERIPH_ID,
    SPMI_FAILURE_INVALID_PORT_ID,
    SPMI_FAILURE_INVALID_OWNER,
    SPMI_FAILURE_INVALID_CHAN_NUM,
    SPMI_FAILURE_CHANNEL_RESERVED,
    SPMI_FAILURE_CHANNEL_NOT_FOUND,
    SPMI_FAILURE_MEMORY_NOT_AVAILABLE,
    SPMI_FAILURE_INVALID_TOKEN,

    SPMI_RESULT_MAX
} Spmi_Result;

typedef enum
{
    SPMI_ACCESS_PRIORITY_LOW = 0,
    SPMI_ACCESS_PRIORITY_HIGH = 1,
    SPMI_ACCESS_PRIORITY_COUNT = 2
} Spmi_AccessPriority;

typedef enum
{
    SPMI_COMMAND_RESET,
    SPMI_COMMAND_SLEEP,
    SPMI_COMMAND_SHUTDOWN,
    SPMI_COMMAND_WAKEUP,
    SPMI_COMMAND_COUNT
} Spmi_Command;

/**
 * SPMI ISR function type
 * @param[in] ctx   User defined data provided when registering
 * @param[in] mask  bit(s) will be set to the corresponding interrupts
 *
 * @return The return value is ignored.  Can be NULL.
 */
typedef void* (*SpmiIsr)(void* ctx, unsigned int mask);

/** Legacy - DEPRECATED - don't use in new code **/
#define SPMI_BUS_SUCCESS       SPMI_SUCCESS
#define SPMI_CFG_SUCCESS       SPMI_SUCCESS
#define SPMI_INTR_CTLR_SUCCESS SPMI_SUCCESS
#define SPMI_BUS_ACCESS_PRIORITY_LOW  SPMI_ACCESS_PRIORITY_LOW
#define SPMI_BUS_ACCESS_PRIORITY_HIGH SPMI_ACCESS_PRIORITY_HIGH

#define SPMI_BUS_SERIAL_CLK_IS_OFF SPMI_FAILURE_SERIAL_CLK_IS_OFF
#define SPMI_BUS_AHB_CLK_IS_OFF    SPMI_FAILURE_AHB_CLK_IS_OFF

#define SPMI_BUS_FAILURE_INIT_FAILED         SPMI_FAILURE_INIT_FAILED
#define SPMI_BUS_FAILURE_GENERAL_FAILURE     SPMI_FAILURE_FUNCTIONALITY_NOT_SUPPORTED
#define SPMI_BUS_FAILURE_INVALID_PARAMETER   SPMI_FAILURE_INVALID_PARAMETER
#define SPMI_BUS_FAILURE_TRANSACTION_FAILED  SPMI_FAILURE_TRANSACTION_FAILED
#define SPMI_BUS_FAILURE_TRANSACTION_DENIED  SPMI_FAILURE_TRANSACTION_DENIED
#define SPMI_BUS_FAILURE_TRANSACTION_DROPPED SPMI_FAILURE_TRANSACTION_DROPPED
#define SPMI_BUS_FAILURE_TRANSACTION_TIMEOUT SPMI_FAILURE_TRANSACTION_TIMEOUT

#define SPMI_BUS_COMMAND_RESET    SPMI_COMMAND_RESET
#define SPMI_BUS_COMMAND_SLEEP    SPMI_COMMAND_SLEEP
#define SPMI_BUS_COMMAND_SHUTDOWN SPMI_COMMAND_SHUTDOWN
#define SPMI_BUS_COMMAND_WAKEUP   SPMI_COMMAND_WAKEUP
#define SPMI_BUS_COMMAND_COUNT    SPMI_COMMAND_COUNT

#define SPMI_BUS_ACCESS_PRIORITY_COUNT SPMI_ACCESS_PRIORITY_COUNT

typedef Spmi_Result SpmiBus_ResultType;
typedef Spmi_Result SpmiCfg_ResultType;
typedef Spmi_Result SpmiIntrCtlr_ResultType;
typedef Spmi_Command SpmiBus_CommandType;
typedef Spmi_AccessPriority SpmiBus_AccessPriorityType;
/** Legacy - DEPRECATED - don't use in new code **/

#define SPMI_TIMEOUT_USEC 400

#define SPMI_MAX_MASTER_ID   SWIO_MAX_BUSES_SUPPORTED
#define SPMI_MAX_SLAVE_ID    0x0F
#define SPMI_MAX_PERIPH_ID   0xFF
#define SPMI_MAX_REG_OFFSET  0xFF

#define SPMI_MAX_REG_ADDRESS 0xFFFF

#define REG_ADDR_TO_PERIPH_ID(addr)  (((addr) >> 8) & 0xFF)
#define REG_ADDR_TO_REG_OFFSET(addr) ((addr) & 0xFF)

#define SLAVE_PERIPH_TO_PPID(slave, periph) (((slave) << 8) | (periph))

#define PPID_TO_SLAVE_ID(ppid)  (((ppid) >> 8) & SPMI_MAX_SLAVE_ID)
#define PPID_TO_PERIPH_ID(ppid) ((ppid) & SPMI_MAX_PERIPH_ID)

typedef enum
{
    SPMI_CFG_NONE,   /** No static configuration will be done */
    SPMI_CFG_FULL,   /** All supported features will be enabled */
    SPMI_CFG_MINIMAL /** A minimal number of features will be enabled */
} SpmiBusCfg_ConfigType;

typedef enum
{
    PMIC_ARB_CMD_EXTENDED_REG_WRITE_LONG = 0,
    PMIC_ARB_CMD_EXTENDED_REG_READ_LONG = 1,
    PMIC_ARB_CMD_EXTENDED_REG_WRITE = 2,
    PMIC_ARB_CMD_RESET = 3,
    PMIC_ARB_CMD_SLEEP = 4,
    PMIC_ARB_CMD_SHUTDOWN = 5,
    PMIC_ARB_CMD_WAKEUP = 6,
    PMIC_ARB_CMD_AUTHENTICATE = 7,
    PMIC_ARB_CMD_MASTER_READ = 8,
    PMIC_ARB_CMD_MASTER_WRITE = 9,
    PMIC_ARB_CMD_TRANSFER_BUS_OWNERSHIP = 10,
    PMIC_ARB_CMD_DEVICE_DESC_BLOCK_MASTER = 11,
    PMIC_ARB_CMD_DEVICE_DESC_BLOCK_SLAVE = 12,
    PMIC_ARB_CMD_EXTENDED_REGISTER_READ = 13,
    PMIC_ARB_CMD_REGISTER_WRITE = 14,
    PMIC_ARB_CMD_REGISTER_READ = 15,
    PMIC_ARB_CMD_REGISTER_0_WRITE = 16,
    PMIC_ARB_CMD_MAX
} PmicArbCmd;

#include <asm/mach/spmi.h>

#endif
